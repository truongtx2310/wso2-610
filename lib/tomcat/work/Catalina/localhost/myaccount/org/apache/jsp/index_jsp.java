/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2024-05-23 09:47:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL;
import static org.wso2.carbon.utils.multitenancy.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
import org.owasp.encoder.Encode;
import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils.isOrganizationManagementEnabled;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL");
    _jspx_imports_classes.add("static org.wso2.carbon.utils.multitenancy.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkUtils.isOrganizationManagementEnabled");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--\n");
      out.write("* Copyright (c) 2022, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n");
      out.write("*\n");
      out.write("* WSO2 LLC. licenses this file to you under the Apache License,\n");
      out.write("* Version 2.0 (the \"License\"); you may not use this file except\n");
      out.write("* in compliance with the License.\n");
      out.write("* You may obtain a copy of the License at\n");
      out.write("*\n");
      out.write("*     http://www.apache.org/licenses/LICENSE-2.0\n");
      out.write("*\n");
      out.write("* Unless required by applicable law or agreed to in writing,\n");
      out.write("* software distributed under the License is distributed on an\n");
      out.write("* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n");
      out.write("* KIND, either express or implied. See the License for the\n");
      out.write("* specific language governing permissions and limitations\n");
      out.write("* under the License.\n");
      out.write("-->\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    if(request.getParameter("code") != null && !request.getParameter("code").trim().isEmpty()) {request.getRequestDispatcher("/authenticate?code="+request.getParameter("code")+"&AuthenticatedIdPs="+request.getParameter("AuthenticatedIdPs")+"&session_state="+request.getParameter("session_state")).forward(request, response);}

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <script>\n");
      out.write("            // Handles myaccount tenanted signout before auth sdk get loaded\n");
      out.write("            var applicationDomain = window.location.origin;\n");
      out.write("            var userAccessedPath = window.location.href;\n");
      out.write("            var isSignOutSuccess = userAccessedPath.includes(\"sign_out_success\");\n");
      out.write("\n");
      out.write("            if(isSignOutSuccess) {\n");
      out.write("                window.location.href = applicationDomain+'/'+\"myaccount\"\n");
      out.write("            }\n");
      out.write("        </script>\n");
      out.write("        <script src=\"/myaccount/auth-spa-0.3.3.min.js\"></script>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <script>\n");
      out.write("            var serverOrigin = \"");
      out.print(getServerURL("", true, true));
      out.write("\";\n");
      out.write("            var authorizationCode = \"");
      out.print(Encode.forHtml(request.getParameter("code")));
      out.write("\" != \"null\"\n");
      out.write("                                        ? \"");
      out.print(Encode.forHtml(request.getParameter("code")));
      out.write("\"\n");
      out.write("                                        : null;\n");
      out.write("            var authSessionState = \"");
      out.print(Encode.forHtml(request.getParameter("session_state")));
      out.write("\" != \"null\"\n");
      out.write("                                        ? \"");
      out.print(Encode.forHtml(request.getParameter("session_state")));
      out.write("\"\n");
      out.write("                                        : null;\n");
      out.write("            var isOrganizationManagementEnabled = JSON.parse(\"");
      out.print( isOrganizationManagementEnabled() );
      out.write("\");\n");
      out.write("\n");
      out.write("\n");
      out.write("            if(!authorizationCode) {\n");
      out.write("                function getApiPath(path) {\n");
      out.write("                    if(path) {\n");
      out.write("                        return serverOrigin + path;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    return serverOrigin;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var auth = AsgardeoAuth.AsgardeoSPAClient.getInstance();\n");
      out.write("\n");
      out.write("                var authConfig = {\n");
      out.write("                    signInRedirectURL: applicationDomain.replace(/\\/+$/, '') + \"/\" + \"myaccount\",\n");
      out.write("                    signOutRedirectURL: applicationDomain.replace(/\\/+$/, ''),\n");
      out.write("                    clientID: \"MY_ACCOUNT\",\n");
      out.write("                    baseUrl: getApiPath(),\n");
      out.write("                    responseMode: \"form_post\",\n");
      out.write("                    scope: [\"openid SYSTEM\"],\n");
      out.write("                    storage: \"webWorker\",\n");
      out.write("                    enablePKCE: true\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if(isOrganizationManagementEnabled) {\n");
      out.write("                    authConfig.endpoints = {\n");
      out.write("                        authorizationEndpoint: getApiPath(\"/t/carbon.super/oauth2/authorize?ut=\")\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                sessionStorage.setItem(\"auth_callback_url_my_account\",\n");
      out.write("                    userAccessedPath.split(window.origin)[1]\n");
      out.write("                    ? userAccessedPath.split(window.origin)[1].replace(/\\/+$/, '')\n");
      out.write("                    : null\n");
      out.write("                )\n");
      out.write("\n");
      out.write("                auth.initialize(authConfig);\n");
      out.write("                auth.signIn();\n");
      out.write("            }\n");
      out.write("        </script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
